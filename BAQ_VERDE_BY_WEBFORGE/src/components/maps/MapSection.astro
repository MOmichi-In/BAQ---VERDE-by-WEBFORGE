---
// Función mejorada para crear iconos de marcador
    function createCustomMarkerIcon(color, number) {      
      return L.divIcon({
        className: 'custom-marker-icon',
        html: `<div style="background-color: ${color};" class="marker-bubble">${number}</div>`,
        iconSize: [36, 48],
        iconAnchor: [18, 42],
        popupAnchor: [0, -42]
      });
    }
---
<!-- Estilos de Leaflet -->
<link 
  rel="stylesheet" 
  href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" 
/>
<!-- Font Awesome -->
<link 
  rel="stylesheet" 
  href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" 
/>
<!-- Google Fonts -->
<link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">

<style is:global>
  /* Contenedor principal */
  .map-app-container {
    display: flex;
    height: calc(100vh - 4rem);
    width: 100%;
    overflow: hidden;
    box-shadow: var(--shadow-lg);
    font-family: var(--font-family-base);
    background-color: var(--bv-blanco);
    border: 1px solid var(--bv-gris-claro);
    border-radius: var(--border-radius-md);
  }

  /* Sidebar izquierdo */
  .sidebar {
    display: flex;
    width: 320px;
    display: flex;
    flex-direction: column;
    border-right: 1px solid var(--bv-gris-claro);
    background: var(--bv-blanco);
    z-index: 2;
    overflow: auto;
  }

  /* Header del sidebar */
  .sidebar-header {
    padding: var(--spacing-lg) var(--spacing-md);
    background: linear-gradient(135deg, var(--bv-verde-primario) 0%, var(--bv-verde-primario-dark) 100%);
    color: var(--bv-blanco);
    position: relative;
    flex-shrink: 0;   /* nunca se reduce */
  }

  .sidebar-header h3 {
    color: var(--bv-blanco);
    margin: 0;
    font-size: 1.125rem;
    font-weight: 700;
    line-height: 1.3;
    font-family: var(--font-family-heading);
  }

  .sidebar-subtitle {
    font-size: 0.8125rem;
    opacity: 0.95;
    margin-top: var(--spacing-xs);
  }

  /* Contenido del sidebar */
  .sidebar-content {
    flex: 1;
    padding: var(--spacing-md);
    overflow-y: auto;
    background: var(--bv-gris-claro);
  }

  /* Grupo de filtros */
  .filter-group {
    margin-bottom: var(--spacing-md);
  }

  /* Items de filtro */
  .filter-item {
    display: flex;
    align-items: center;
    padding: var(--spacing-md);
    background: var(--bv-blanco);
    border: 1px solid var(--bv-gris-claro);
    border-radius: var(--border-radius-lg);
    margin-bottom: var(--spacing-md);
    cursor: pointer;
    transition: transform 0.18s ease, box-shadow 0.18s ease, border-color 0.18s ease;
    position: relative;
  }

  .filter-item:hover {
    transform: translateY(-2px);
    box-shadow: var(--shadow-md);
    border-color: var(--bv-verde-primario);
  }

  .filter-item.active {
    border-color: var(--bv-verde-primario);
    box-shadow: 0 0 0 6px rgba(55,180,72,0.06);
  }

  .filter-item-icon {
    width: 44px;
    height: 44px;
    border-radius: var(--border-radius-md);
    display: flex;
    justify-content: center;
    align-items: center;
    margin-right: var(--spacing-md);
    font-size: 18px;
    flex-shrink: 0;
  }

  .filter-item-content {
    flex-grow: 1;
    min-width: 0;
  }

  .filter-item-title {
    font-size: 0.9375rem;
    font-weight: 600;
    color: var(--bv-azul-oscuro);
    margin-bottom: 2px;
    display: flex;
    align-items: center;
    gap: var(--spacing-sm);
    font-family: var(--font-family-heading);
  }

  .category-count {
    font-size: 0.75rem;
    font-weight: 500;
    color: var(--bv-gris);
    background-color: var(--bv-gris-claro);
    padding: 2px var(--spacing-sm);
    border-radius: var(--border-radius-lg);
    min-width: 24px;
    text-align: center;
  }

  .filter-item-description {
    font-size: 0.8125rem;
    color: var(--bv-gris);
    line-height: 1.4;
  }

  /* Switch moderno (estilos basados en tokens) */
  .switch {
    position: relative;
    display: inline-block;
    width: 48px;
    height: 28px;
    flex-shrink: 0;
  }
  .switch input {
    opacity: 0;
    width: 0;
    height: 0;
  }
  .slider {
    position: absolute;
    cursor: pointer;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: var(--bv-gris-claro);
    transition: background-color 0.3s cubic-bezier(0.4,0,0.2,1), box-shadow 0.2s ease;
    border-radius: 34px;
  }
  .slider:before {
    position: absolute;
    content: "";
    height: 20px;
    width: 20px;
    left: 4px;
    bottom: 4px;
    background-color: var(--bv-blanco);
    transition: transform 0.3s cubic-bezier(0.4,0,0.2,1);
    border-radius: 50%;
    box-shadow: var(--shadow-sm);
  }
  .switch input:checked + .slider {
    background-color: var(--bv-amarillo);
  }
  .switch input:checked + .slider.biodiversity-slider {
    background-color: var(--bv-verde-primario-dark);
  }
  .switch input:checked + .slider.soil-slider {
    background-color: rgba(137, 81, 41, 1); /* Marrón más oscuro al activar */
  }
  .switch input:focus + .slider {
    box-shadow: 0 0 0 4px rgba(55,180,72,0.12);
  }
  .switch input:checked + .slider:before {
    transform: translateX(20px);
  }

  /* Sliders por categoría (usar var tokens) */
  .slider.airQuality-slider { }
  .slider.biodiversity-slider { }
  .slider.soil-slider { }

  /* Mapa */
  #map {
    flex: 1;
    height: 100%;
    height: 100%;
    position: relative;
    background-color: var(--bv-gris-claro);
  }

  /* Popups Leaflet estilizados */
  .leaflet-popup-content-wrapper {
    border-radius: var(--border-radius-lg);
    box-shadow: var(--shadow-lg);
    border: none;
    padding: 0;
    overflow: hidden;
  }

  .leaflet-popup-content {
    font-family: var(--font-family-base);
    color: var(--bv-azul-oscuro);
    font-size: 14px;
    margin: 0;
    padding: var(--spacing-md);
    background: var(--bv-blanco);
  }

  .leaflet-popup-content h4 {
    color: var(--bv-verde-primario);
    margin: 0 0 var(--spacing-sm) 0;
    font-size: 1rem;
    font-weight: 600;
    font-family: var(--font-family-heading);
  }

  .leaflet-popup-content p {
    margin: var(--spacing-xs) 0 0 0;
    color: var(--bv-gris);
    font-size: 0.8125rem;
    line-height: 1.4;
  }

  .leaflet-popup-tip {
    background: var(--bv-blanco);
    border: none;
    box-shadow: var(--shadow-md);
  }

  /* Controles del mapa */
  .leaflet-control-zoom {
    border: none;
    box-shadow: var(--shadow-md);
  }

  .leaflet-control-zoom a {
    background: var(--bv-blanco);
    color: var(--bv-azul-oscuro);
    border: none;
    border-radius: var(--border-radius-md) !important;
    width: 40px;
    height: 40px;
    line-height: 40px;
    font-size: 18px;
    font-weight: 600;
    margin: 2px;
    transition: all 0.18s ease;
  }

  .leaflet-control-zoom a:hover {
    background: var(--bv-gris-claro);
    color: var(--bv-verde-primario);
  }

  /* Marcadores custom */
  .custom-marker-icon {
    background: transparent !important;
    border: none !important;
  }

  .marker-bubble {
    width: 36px;
    height: 36px;
    border-radius: 50%;
    display: flex;
    justify-content: center;
    align-items: center;
    color: var(--bv-blanco);
    font-weight: 700;
    font-size: 14px;
    box-shadow: var(--shadow-md);
    border: 3px solid var(--bv-blanco);
    position: relative;
    transform: translateY(-50%);
  }

  .marker-bubble::after {
    content: '';
    position: absolute;
    bottom: -6px;
    left: 50%;
    transform: translateX(-50%);
    border-left: 6px solid transparent;
    border-right: 6px solid transparent;
    border-top: 6px solid var(--bv-blanco);
  }

  /* Responsive: en pantallas pequeñas apilar */
  @media (max-width: 1024px) {
    .map-app-container { flex-direction: column; }
    .sidebar {
      width: 100%;
      border-right: none;
      border-bottom: 1px solid var(--bv-gris-claro);
      max-height: 40%;
    }
    #map { height: calc(100% - var(--sidebar-max-height, 40%)); }
  }
  /* pequeños ajustes para móviles */
  @media (max-width: 768px) {
    .sidebar { max-height: 35%; }
    #map { height: calc(100% - 35%); }
  }

  /* Si por alguna razón algo hace overflow, aseguramos que map siempre se vea */
  .map-hidden-fallback {
    min-height: 300px !important;
  }
</style>

<!-- Contenido principal -->
<div class="map-app-container">
  <!-- Sidebar izquierdo -->
  <div class="sidebar" role="region" aria-label="Filtros de mapas">
    <div class="sidebar-header">
      <h3>Datos Ambientales</h3>
      <div class="sidebar-subtitle">Barranquilla, Colombia</div>
    </div>
    
    <div class="sidebar-content">
      <!-- Grupo 1: Calidad del Aire -->
      <div class="filter-group">
        <div class="filter-item" data-category="airQuality">
          <div class="filter-item-icon" style="background-color: rgba(255, 234, 0, 0.1); color: #FFEA00;">
            <i class="fas fa-wind"></i>
          </div>
          <div class="filter-item-content">
            <div class="filter-item-title">Calidad del aire <span class="category-count">(0)</span></div>
            <div class="filter-item-description">Estaciones de monitoreo, contaminantes</div>
          </div>
          <label class="switch">
            <input type="checkbox" checked data-category="airQuality">
            <span class="slider airQuality-slider"></span>
          </label>
        </div>
      </div>

      <!-- Grupo 2: Biodiversidad -->
      <div class="filter-group">
        <div class="filter-item" data-category="biodiversity">
          <div class="filter-item-icon" style="background-color: rgba(39, 155, 72, 0.1); color: #279B48;">
            <i class="fas fa-leaf"></i>
          </div>
          <div class="filter-item-content">
            <div class="filter-item-title">Biodiversidad <span class="category-count">(0)</span></div>
            <div class="filter-item-description">Reservas naturales, corredores</div>
          </div>
          <label class="switch">
            <input type="checkbox" data-category="biodiversity">
            <span class="slider biodiversity-slider"></span>
          </label>
        </div>
      </div>

      <!-- Grupo 3: Suelo -->
      <div class="filter-group">
        <div class="filter-item" data-category="soil">
          <div class="filter-item-icon" style="background-color: rgba(57, 169, 52, 0.1); color: #39A934;">
            <i class="fas fa-mountain"></i>
          </div>
          <div class="filter-item-content">
            <div class="filter-item-title">Suelo <span class="category-count">(0)</span></div>
            <div class="filter-item-description">Calidad, erosión, uso de tierra</div>
          </div>
          <label class="switch">
            <input type="checkbox" data-category="soil">
            <span class="slider soil-slider"></span>
          </label>
        </div>
      </div>
    </div>
  </div>

  <!-- Mapa -->
  <div id="map" role="application" aria-label="Mapa Interactivo"></div>
</div>

<script>
  // Solo se ejecuta en el navegador
  if (typeof window !== "undefined") {
    // Configuración de categorías y colores actualizados
    const categoriesConfig = {
      airQuality: {
        color: '#FFEA00', // Amarillo oficial
        bgColor: 'rgba(255, 234, 0, 0.1)',
        iconClass: 'fas fa-wind',
        title: 'Calidad del aire',
        description: 'Estaciones de monitoreo, contaminantes'
      },
      biodiversity: {
        color: 'var(--bv-verde-primario-dark)', // Verde oficial
        bgColor: 'var(--bv-verde-primario-dark)',
        iconClass: 'fas fa-leaf',
        title: 'Biodiversidad',
        description: 'Reservas naturales, corredores'
      },
      soil: {
        color: 'rgba(137, 81, 41, 1)', // Verde secundario oficial
        bgColor: 'rgba(57, 169, 52, 0.1)',
        iconClass: 'fas fa-mountain',
        title: 'Suelo',
        description: 'Calidad, erosión, uso de tierra'
      }
    };

    // Datos de ejemplo mejorados
    const allMarkersData = [
      { id: 'aq1', lat: 11.000, lng: -74.810, category: 'airQuality', popupContent: '<h4>Estación A de Aire</h4><p>Nivel de CO2: Medio<br>PM2.5: 35 μg/m³</p>' },
      { id: 'aq2', lat: 10.995, lng: -74.820, category: 'airQuality', popupContent: '<h4>Estación B de Aire</h4><p>Nivel de polen: Bajo<br>Ozono: 0.08 ppm</p>' },
      { id: 'aq3', lat: 10.985, lng: -74.795, category: 'airQuality', popupContent: '<h4>Estación C de Aire</h4><p>Contaminantes: PM2.5<br>Calidad: Moderada</p>' },
      { id: 'b1', lat: 10.970, lng: -74.800, category: 'biodiversity', popupContent: '<h4>Reserva Natural Ciénaga</h4><p>Especies de aves: 150<br>Área protegida: 45 ha</p>' },
      { id: 'b2', lat: 10.960, lng: -74.815, category: 'biodiversity', popupContent: '<h4>Corredor Ecológico</h4><p>Flora y fauna diversa<br>Conectividad: Alta</p>' },
      { id: 's1', lat: 10.950, lng: -74.790, category: 'soil', popupContent: '<h4>Zona de Reforestación</h4><p>Tipo de suelo: Arcilloso<br>pH: 6.5</p>' },
      { id: 's2', lat: 10.940, lng: -74.805, category: 'soil', popupContent: '<h4>Muestra de Suelo</h4><p>Riesgo de erosión: Bajo<br>Materia orgánica: 3.2%</p>' },
      { id: 's3', lat: 10.930, lng: -74.800, category: 'soil', popupContent: '<h4>Análisis de Suelo</h4><p>Uso agrícola<br>Fertilidad: Buena</p>' },
    ];

    let map;
    let currentMarkers = {}; 

    // Función mejorada para crear iconos de marcador
    function createCustomMarkerIcon(color, number) {
      // Necesitamos obtener el valor real del color si es una variable CSS
      let actualColor = color;
      if (color.startsWith('var(')) {
        const rootStyles = getComputedStyle(document.documentElement);
        const colorName = color.replace('var(', '').replace(')', '');
        actualColor = rootStyles.getPropertyValue(colorName).trim();
      }
      
      return L.divIcon({
        className: 'custom-marker-icon',
        html: `<div style="background-color: ${actualColor};" class="marker-bubble">${number}</div>`,
        iconSize: [36, 48],
        iconAnchor: [18, 42],
        popupAnchor: [0, -42]
      });
    }

    // Función principal para renderizar/actualizar los marcadores en el mapa
    function renderMarkers() {
      // Elimina todos los marcadores existentes del mapa
      for (const category in currentMarkers) {
        currentMarkers[category].forEach(marker => {
          map.removeLayer(marker);
        });
      }
      currentMarkers = {};

      // Obtiene las categorías que están activas
      const activeCategories = Array.from(document.querySelectorAll('.sidebar input[type="checkbox"]:checked'))
                                    .map(input => input.dataset.category);

      const categoryCounts = {};

      // Actualizar estados visuales de los items
      document.querySelectorAll('.filter-item').forEach(item => {
        const category = item.dataset.category;
        const isActive = activeCategories.includes(category);
        item.classList.toggle('active', isActive);
      });

      activeCategories.forEach(activeCat => {
        let categoryMarkerCount = 0;
        currentMarkers[activeCat] = [];

        allMarkersData.filter(data => data.category === activeCat)
                      .forEach((markerData, index) => {
          categoryMarkerCount++;
          const color = categoriesConfig[activeCat].color;
          const markerIcon = createCustomMarkerIcon(color, categoryMarkerCount);
          const marker = L.marker([markerData.lat, markerData.lng], { icon: markerIcon })
                          .addTo(map)
                          .bindPopup(markerData.popupContent);
          currentMarkers[activeCat].push(marker);
        });
        categoryCounts[activeCat] = categoryMarkerCount;
      });

      // Actualiza los contadores en la barra lateral
      document.querySelectorAll('.sidebar .filter-item').forEach(item => {
        const category = item.dataset.category;
        const countSpan = item.querySelector('.category-count');
        if (countSpan) {
          countSpan.textContent = `(${categoryCounts[category] || 0})`;
        }
      });
    }

    // Función para cargar Leaflet e inicializar el mapa
    const loadLeaflet = () => {
      map = L.map("map", {
        center: [10.9877, -74.8055],
        zoom: 13,
        zoomControl: false,
        attributionControl: true
      });

      // Capa base de OpenStreetMap
      L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
        attribution: "&copy; OpenStreetMap contributors",
        maxZoom: 19
      }).addTo(map);

      renderMarkers();

      // Event listeners
      document.querySelectorAll('.sidebar input[type="checkbox"]').forEach(checkbox => {
        checkbox.addEventListener('change', renderMarkers);
      });
    };

    // Carga Leaflet e inicializa
    if (window.L) {
      loadLeaflet();
    } else {
      const script = document.createElement("script");
      script.src = "https://unpkg.com/leaflet@1.9.4/dist/leaflet.js";
      script.onload = loadLeaflet;
      document.head.appendChild(script);
    }
  }

  document.addEventListener("DOMContentLoaded", () => {
  const mapaSection = document.querySelector(".map-app-container");

  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        // Ajusta el scroll para que el mapa quede perfectamente posicionado
        window.scrollTo({
          top: mapaSection.offsetTop - 64, // 64px = 4rem (altura del nav)
          behavior: "smooth"
        });
      }
    });
  }, { threshold: 0.5 });

  observer.observe(mapaSection);
});
</script>