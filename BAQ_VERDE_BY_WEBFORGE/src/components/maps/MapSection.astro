---
import { getStations } from "../../lib/stationsService";

const cookieStore = Astro.cookies;
const sessionToken = cookieStore.get("token")?.value || null;

console.log("üëâ Token de sesi√≥n le√≠do en .astro:", sessionToken);

let stations = [];
try {
  const data = await getStations(sessionToken);
  console.log("üëâ Respuesta cruda de la API en .astro:", data);

  if (Array.isArray(data)) {
    stations = data;
  } else if (data && Array.isArray(data.stations)) {
    stations = data.stations;
  } else {
    console.warn("‚ö†Ô∏è La API no devolvi√≥ un array ni un objeto con stations");
  }
} catch (error) {
  console.error("‚ùå Error al obtener las estaciones:", error);
}

// Solo filtramos por coordenadas v√°lidas
const validStations = stations.filter(s => 
  typeof s.lat === 'number' && 
  typeof s.lon === 'number' && 
  !isNaN(s.lat) && 
  !isNaN(s.lon)
);

console.log("‚úÖ Estaciones v√°lidas para el mapa:", validStations);
---

<!-- Estilos de Leaflet -->
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
<!-- Font Awesome -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" />
<!-- Google Fonts -->
<link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">

<style is:global>
  /* Contenedor principal */
  .map-app-container {
    display: flex;
    height: calc(100vh - 4rem);
    width: 100%;
    overflow: hidden;
    box-shadow: var(--shadow-lg);
    font-family: var(--font-family-base);
    background-color: var(--bv-blanco);
    border: 1px solid var(--bv-gris-claro);
    border-radius: var(--border-radius-md);
  }

  /* Sidebar izquierdo */
  .sidebar {
    width: 320px;
    display: flex;
    flex-direction: column;
    border-right: 1px solid var(--bv-gris-claro);
    background: var(--bv-blanco);
    z-index: 2;
    overflow: auto;
  }

  .sidebar-header {
    padding: var(--spacing-lg) var(--spacing-md);
    background: linear-gradient(135deg, var(--bv-verde-primario) 0%, var(--bv-verde-primario-dark) 100%);
    color: var(--bv-blanco);
    position: relative;
    flex-shrink: 0;
  }

  .sidebar-header h3 {
    color: var(--bv-blanco);
    margin: 0;
    font-size: 1.125rem;
    font-weight: 700;
    line-height: 1.3;
    font-family: var(--font-family-heading);
  }

  .sidebar-subtitle {
    font-size: 0.8125rem;
    opacity: 0.95;
    margin-top: var(--spacing-xs);
  }

  .sidebar-content {
    flex: 1;
    padding: var(--spacing-md);
    overflow-y: auto;
    background: var(--bv-gris-claro);
  }

  .filter-group {
    margin-bottom: var(--spacing-md);
  }

  .filter-item {
    display: flex;
    align-items: center;
    padding: var(--spacing-md);
    background: var(--bv-blanco);
    border: 1px solid var(--bv-gris-claro);
    border-radius: var(--border-radius-lg);
    margin-bottom: var(--spacing-md);
    cursor: pointer;
    transition: transform 0.18s ease, box-shadow 0.18s ease, border-color 0.18s ease;
    position: relative;
  }

  .filter-item:hover {
    transform: translateY(-2px);
    box-shadow: var(--shadow-md);
    border-color: var(--bv-verde-primario);
  }

  .filter-item.active {
    border-color: var(--bv-verde-primario);
    box-shadow: 0 0 0 6px rgba(55,180,72,0.06);
  }

  .filter-item-icon {
    width: 44px;
    height: 44px;
    border-radius: var(--border-radius-md);
    display: flex;
    justify-content: center;
    align-items: center;
    margin-right: var(--spacing-md);
    font-size: 18px;
    flex-shrink: 0;
  }

  .filter-item-content {
    flex-grow: 1;
    min-width: 0;
  }

  .filter-item-title {
    font-size: 0.9375rem;
    font-weight: 600;
    color: var(--bv-azul-oscuro);
    margin-bottom: 2px;
    display: flex;
    align-items: center;
    gap: var(--spacing-sm);
    font-family: var(--font-family-heading);
  }

  .category-count {
    font-size: 0.75rem;
    font-weight: 500;
    color: var(--bv-gris);
    background-color: var(--bv-gris-claro);
    padding: 2px var(--spacing-sm);
    border-radius: var(--border-radius-lg);
    min-width: 24px;
    text-align: center;
  }

  .filter-item-description {
    font-size: 0.8125rem;
    color: var(--bv-gris);
    line-height: 1.4;
  }

  .switch {
    position: relative;
    display: inline-block;
    width: 48px;
    height: 28px;
    flex-shrink: 0;
  }
  .switch input { opacity: 0; width: 0; height: 0; }
  .slider {
    position: absolute;
    cursor: pointer;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: var(--bv-gris-claro);
    transition: background-color 0.3s cubic-bezier(0.4,0,0.2,1), box-shadow 0.2s ease;
    border-radius: 34px;
  }
  .slider:before {
    position: absolute;
    content: "";
    height: 20px;
    width: 20px;
    left: 4px;
    bottom: 4px;
    background-color: var(--bv-blanco);
    transition: transform 0.3s cubic-bezier(0.4,0,0.2,1);
    border-radius: 50%;
    box-shadow: var(--shadow-sm);
  }
  .switch input:checked + .slider { background-color: var(--bv-amarillo); }
  .switch input:checked + .slider[data-category="biodiversity"] { background-color: var(--bv-verde-primario-dark); }
  .switch input:checked + .slider[data-category="soil"] { background-color: rgba(137, 81, 41, 1); }
  .switch input:focus + .slider { box-shadow: 0 0 0 4px rgba(55,180,72,0.12); }
  .switch input:checked + .slider:before { transform: translateX(20px); }

  #map {
    flex: 1;
    height: 100%;
    position: relative;
    background-color: var(--bv-gris-claro);
  }

  .custom-marker-icon {
    background: transparent !important;
    border: none !important;
  }
  .marker-bubble {
    width: 36px;
    height: 36px;
    border-radius: 50%;
    display: flex;
    justify-content: center;
    align-items: center;
    color: var(--bv-blanco);
    font-weight: 700;
    font-size: 14px;
    box-shadow: var(--shadow-md);
    border: 3px solid var(--bv-blanco);
    position: relative;
    transform: translateY(-50%);
  }
  .marker-bubble::after {
    content: '';
    position: absolute;
    bottom: -6px;
    left: 50%;
    transform: translateX(-50%);
    border-left: 6px solid transparent;
    border-right: 6px solid transparent;
    border-top: 6px solid var(--bv-blanco);
  }

  @media (max-width: 1024px) {
    .map-app-container { flex-direction: column; }
    .sidebar { width: 100%; max-height: 40%; }
    #map { height: 60%; }
  }

  /* Modal personalizado */
  .modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    background: rgba(0, 0, 0, 0.5);
    backdrop-filter: blur(8px);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
  }

  .modal-content {
    background: var(--bv-blanco);
    width: 80%;
    max-width: 600px;
    max-height: 80vh;
    padding: var(--spacing-lg);
    border-radius: var(--border-radius-lg);
    box-shadow: var(--shadow-xl);
    overflow-y: auto;
    position: relative;
    font-family: var(--font-family-base);
  }

  .modal-close {
    position: absolute;
    top: var(--spacing-md);
    right: var(--spacing-md);
    background: none;
    border: none;
    font-size: 1.5rem;
    cursor: pointer;
    color: var(--bv-gris);
    font-weight: bold;
  }

  .modal-close:hover {
    color: var(--bv-azul-oscuro);
  }

  .form-group {
    margin-bottom: var(--spacing-md);
  }

  .form-group label {
    display: block;
    margin-bottom: var(--spacing-xs);
    font-weight: 600;
    color: var(--bv-azul-oscuro);
    font-family: var(--font-family-heading);
  }

  .form-group select {
    width: 100%;
    padding: var(--spacing-sm);
    border: 1px solid var(--bv-gris-claro);
    border-radius: var(--border-radius-md);
    background: var(--bv-blanco);
    font-size: 0.9375rem;
  }

  .btn-primary {
    width: 100%;
    padding: var(--spacing-md);
    background: var(--bv-verde-primario);
    color: white;
    border: none;
    border-radius: var(--border-radius-md);
    font-weight: 600;
    cursor: pointer;
    transition: background 0.2s;
  }

  .btn-primary:hover:not(:disabled) {
    background: var(--bv-verde-primario-dark);
  }

  .btn-primary:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }

  /* Gr√°fica */
  .chart-container {
    margin-top: var(--spacing-md);
    height: 200px;
    position: relative;
  }

  .chart-title {
    font-size: 0.875rem;
    color: var(--bv-gris);
    text-align: center;
    margin-top: var(--spacing-xs);
    font-weight: 500;
  }
</style>

<div class="map-app-container">
  <div class="sidebar" role="region" aria-label="Filtros de mapas">
    <div class="sidebar-header">
      <h3>Datos Ambientales</h3>
      <div class="sidebar-subtitle">Barranquilla, Colombia</div>
    </div>
    <div class="sidebar-content">
      <div class="filter-group">
        <div class="filter-item" data-category="airQuality">
          <div class="filter-item-icon" style="background-color: rgba(255, 234, 0, 0.1); color: #FFEA00;"><i class="fas fa-wind"></i></div>
          <div class="filter-item-content">
            <div class="filter-item-title">Calidad del aire <span class="category-count">({validStations.length})</span></div>
            <div class="filter-item-description">Estaciones de monitoreo</div>
          </div>
          <label class="switch">
            <input type="checkbox" checked data-category="airQuality">
            <span class="slider" data-category="airQuality"></span>
          </label>
        </div>
      </div>

      <div class="filter-group">
        <div class="filter-item" data-category="biodiversity">
          <div class="filter-item-icon" style="background-color: rgba(39, 155, 72, 0.1); color: #279B48;"><i class="fas fa-leaf"></i></div>
          <div class="filter-item-content">
            <div class="filter-item-title">Biodiversidad <span class="category-count">(0)</span></div>
            <div class="filter-item-description">Reservas naturales, corredores</div>
          </div>
          <label class="switch">
            <input type="checkbox" data-category="biodiversity">
            <span class="slider" data-category="biodiversity"></span>
          </label>
        </div>
      </div>

      <div class="filter-group">
        <div class="filter-item" data-category="soil">
          <div class="filter-item-icon" style="background-color: rgba(57, 169, 52, 0.1); color: #39A934;"><i class="fas fa-mountain"></i></div>
          <div class="filter-item-content">
            <div class="filter-item-title">Suelo <span class="category-count">(0)</span></div>
            <div class="filter-item-description">Calidad, erosi√≥n, uso de tierra</div>
          </div>
          <label class="switch">
            <input type="checkbox" data-category="soil">
            <span class="slider" data-category="soil"></span>
          </label>
        </div>
      </div>
    </div>
  </div>
  <div id="map" role="application" aria-label="Mapa Interactivo"></div>
</div>

<!-- Modal personalizado -->
<div id="stationModal" class="modal-overlay" style="display: none;">
  <div class="modal-content">
    <button class="modal-close" aria-label="Cerrar">&times;</button>
    <h3 id="modalStationTitle"></h3>
    <div class="modal-form">
      <div class="form-group">
        <label for="yearSelect">A√±o</label>
        <select id="yearSelect" disabled>
          <option value="">Cargando...</option>
        </select>
      </div>
      <div class="form-group">
        <label for="monthSelect">Mes</label>
        <select id="monthSelect" disabled>
          <option value="">Seleccione un a√±o</option>
        </select>
      </div>
      <div class="form-group">
        <label for="chartSelect">Gr√°fico</label>
        <select id="chartSelect" disabled>
          <option value="">Cargando...</option>
        </select>
      </div>
      <button id="viewChartBtn" class="btn-primary" disabled>Ver gr√°fico</button>
    </div>
    <!-- Canvas para la gr√°fica -->
    <div class="chart-container">
      <canvas id="chartCanvas"></canvas>
      <div class="chart-title" id="chartTitle">Selecciona un gr√°fico para verlo</div>
    </div>
  </div>
</div>

<!-- Datos para el frontend -->
<div id="station-data" style="display:none;" data-stations={JSON.stringify(validStations)}></div>

<!-- Cargar Chart.js -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
  // Funci√≥n b√°sica de sanitizaci√≥n
  function escapeHtml(unsafe) {
    if (typeof unsafe !== 'string') return String(unsafe);
    return unsafe
      .replace(/&/g, "&amp;")
      .replace(/</g, "<")
      .replace(/>/g, ">")
      .replace(/"/g, "&quot;")
      .replace(/'/g, "&#039;");
  }

  if (typeof window !== "undefined") {
    // Obtener estaciones desde el DOM
    const stationDataEl = document.getElementById('station-data');
    const stationsFromServer = stationDataEl 
      ? JSON.parse(stationDataEl.dataset.stations) 
      : [];

    // Obtener la URL base desde la variable de entorno p√∫blica
    const API_BASE_URL = import.meta.env.PUBLIC_API_URL || 'http://localhost:8000';

    let currentStationData = null;
    let chartInstance = null; // Para reutilizar o destruir la gr√°fica

    const categoriesConfig = {
      airQuality: { color: '#FFEA00' },
      biodiversity: { color: 'var(--bv-verde-primario-dark)' },
      soil: { color: 'rgba(137, 81, 41, 1)' }
    };

    const normalizedStations = stationsFromServer.map(station => ({
      ...station,
      lng: station.lon
    }));

    const airQualityMarkers = normalizedStations.map(station => ({
      id: station._id,
      name: station.name,
      lat: station.lat,
      lng: station.lng,
      category: 'airQuality',
      charts_permited: station.charts_permited || []
    }));

    const allMarkersData = [...airQualityMarkers];
    let map;
    let currentMarkers = {};

    function createCustomMarkerIcon(color, number) {
      let actualColor = color;
      if (color.startsWith('var(')) {
        const rootStyles = getComputedStyle(document.documentElement);
        const varName = color.match(/var\(([^,)]+)/)?.[1] || '';
        actualColor = rootStyles.getPropertyValue(varName).trim() || color;
      }
      return L.divIcon({
        className: 'custom-marker-icon',
        html: `<div style="background-color: ${actualColor};" class="marker-bubble">${number}</div>`,
        iconSize: [36, 48],
        iconAnchor: [18, 42],
        popupAnchor: [0, -42]
      });
    }

    async function openStationModal(stationData) {
      currentStationData = stationData;
      const modal = document.getElementById('stationModal');
      modal.style.display = 'flex';

      document.getElementById('modalStationTitle').textContent = stationData.name;

      const yearSelect = document.getElementById('yearSelect');
      const monthSelect = document.getElementById('monthSelect');
      const chartSelect = document.getElementById('chartSelect');
      const viewBtn = document.getElementById('viewChartBtn');

      yearSelect.innerHTML = '<option value="">Cargando a√±os...</option>';
      monthSelect.innerHTML = '<option value="">Seleccione un a√±o</option>';
      chartSelect.innerHTML = '<option value="">Cargando gr√°ficos...</option>';
      yearSelect.disabled = true;
      monthSelect.disabled = true;
      chartSelect.disabled = true;
      viewBtn.disabled = true;

      try {
        // Gr√°ficos
        if (Array.isArray(stationData.charts_permited) && stationData.charts_permited.length > 0) {
          chartSelect.innerHTML = '';
          stationData.charts_permited.forEach(chart => {
            const opt = document.createElement('option');
            opt.value = chart;
            opt.textContent = chart;
            chartSelect.appendChild(opt);
          });
          chartSelect.disabled = false;
        } else {
          chartSelect.innerHTML = '<option value="">No hay gr√°ficos</option>';
        }

        // Token
        const tokenMatch = document.cookie.match(/(^|;\s*)token=([^;]*)/);
        const token = tokenMatch ? tokenMatch[2] : '';

        // Llamar al endpoint con la URL base
        const response = await fetch(`${API_BASE_URL}/station-data/available-periods?station_id=${encodeURIComponent(stationData.id)}`, {
          method: 'GET',
          headers: {
            'Accept': 'application/json',
            ...(token ? { 'Authorization': `Bearer ${token}` } : {})
          }
        });

        if (!response.ok) throw new Error(`HTTP ${response.status}`);

        const periods = await response.json();
        currentStationData._periods = periods;

        const years = Object.keys(periods).sort((a, b) => parseInt(b) - parseInt(a));
        if (years.length > 0) {
          yearSelect.innerHTML = '';
          years.forEach(year => {
            const opt = document.createElement('option');
            opt.value = year;
            opt.textContent = year;
            yearSelect.appendChild(opt);
          });
          yearSelect.disabled = false;
        } else {
          yearSelect.innerHTML = '<option value="">No hay datos</option>';
        }

        updateViewButtonState();
      } catch (error) {
        console.error("Error al cargar periodos:", error);
        yearSelect.innerHTML = '<option value="">Error al cargar</option>';
        chartSelect.innerHTML = '<option value="">Error al cargar</option>';
      }
    }

    function updateViewButtonState() {
      const year = document.getElementById('yearSelect').value;
      const chart = document.getElementById('chartSelect').value;
      document.getElementById('viewChartBtn').disabled = !(year && chart);
    }

    function closeStationModal() {
      document.getElementById('stationModal').style.display = 'none';
      currentStationData = null;
      // Destruir gr√°fica si existe
      if (chartInstance) {
        chartInstance.destroy();
        chartInstance = null;
      }
      document.getElementById('chartTitle').textContent = 'Selecciona un gr√°fico para verlo';
    }

    function renderMarkers() {
      for (const category in currentMarkers) {
        (currentMarkers[category] || []).forEach(marker => map.removeLayer(marker));
      }
      currentMarkers = {};

      const activeCategories = Array.from(
        document.querySelectorAll('.sidebar input[type="checkbox"]:checked')
      ).map(input => input.dataset.category);

      document.querySelectorAll('.filter-item').forEach(item => {
        item.classList.toggle('active', activeCategories.includes(item.dataset.category));
      });

      activeCategories.forEach(activeCat => {
        currentMarkers[activeCat] = [];
        const markersForCategory = allMarkersData.filter(data => data.category === activeCat);

        markersForCategory.forEach((markerData, index) => {
          const color = categoriesConfig[activeCat].color;
          const markerIcon = createCustomMarkerIcon(color, index + 1);
          const marker = L.marker([markerData.lat, markerData.lng], { icon: markerIcon })
            .addTo(map)
            .on('click', () => openStationModal(markerData));
          currentMarkers[activeCat].push(marker);
        });
      });
    }

    function loadLeaflet() {
      map = L.map("map", { 
        center: [10.9877, -74.8055], 
        zoom: 13, 
        zoomControl: false 
      });

      L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
        attribution: "&copy; <a href='https://www.openstreetmap.org/copyright'>OpenStreetMap</a> contributors",
        maxZoom: 19
      }).addTo(map);

      renderMarkers();

      document.querySelectorAll('.sidebar input[type="checkbox"]').forEach(checkbox => {
        checkbox.addEventListener('change', renderMarkers);
      });

      // Eventos del modal
      document.querySelector('.modal-close').addEventListener('click', closeStationModal);
      document.getElementById('stationModal').addEventListener('click', (e) => {
        if (e.target === document.getElementById('stationModal')) closeStationModal();
      });

      // Cambio de a√±o ‚Üí llenar meses
      document.getElementById('yearSelect').addEventListener('change', function() {
        const monthSelect = document.getElementById('monthSelect');
        const periods = currentStationData?._periods || {};

        if (this.value && periods[this.value]) {
          monthSelect.disabled = false;
          monthSelect.innerHTML = '<option value="">Todos</option>';
          periods[this.value].forEach(month => {
            const opt = document.createElement('option');
            opt.value = month;
            opt.textContent = month.charAt(0).toUpperCase() + month.slice(1);
            monthSelect.appendChild(opt);
          });
        } else {
          monthSelect.disabled = true;
          monthSelect.innerHTML = '<option value="">Seleccione un a√±o</option>';
        }
        updateViewButtonState();
      });

      document.getElementById('chartSelect').addEventListener('change', updateViewButtonState);

      document.getElementById('viewChartBtn').addEventListener('click', async () => {
        const year = document.getElementById('yearSelect').value;
        const month = document.getElementById('monthSelect').value || 'all';
        const chart = document.getElementById('chartSelect').value;
        const stationId = currentStationData.id;

        if (!year || !chart) return;

        // Limpiar gr√°fica anterior
        if (chartInstance) {
          chartInstance.destroy();
          chartInstance = null;
        }

        try {
          const tokenMatch = document.cookie.match(/(^|;\s*)token=([^;]*)/);
          const token = tokenMatch ? tokenMatch[2] : '';

          const url = `${API_BASE_URL}/station-data/hourly-by-month?station_id=${encodeURIComponent(stationId)}&year=${encodeURIComponent(year)}&month=${encodeURIComponent(month)}&variable=${encodeURIComponent(chart)}`;

          const response = await fetch(url, {
            method: 'GET',
            headers: {
              'Accept': 'application/json',
              ...(token ? { 'Authorization': `Bearer ${token}` } : {})
            }
          });

          if (!response.ok) throw new Error(`HTTP ${response.status}`);

          const data = await response.json();

          if (!data.y || !Array.isArray(data.y)) {
            throw new Error('Respuesta inv√°lida: no contiene arreglo "y"');
          }

          // ... dentro del try, despu√©s de obtener `data.y`

// Crear etiquetas para el eje X: 0, 1, 2, ...
const xLabels = data.y.map((_, i) => i);

// Configurar el t√≠tulo
const titleText = `${month.charAt(0).toUpperCase() + month.slice(1)} (horas)`;
document.getElementById('chartTitle').textContent = titleText;

// Obtener el canvas
const ctx = document.getElementById('chartCanvas').getContext('2d');

// Limpiar gr√°fica anterior
if (chartInstance) {
  chartInstance.destroy();
}

// Crear gradiente
const gradient = ctx.createLinearGradient(0, 0, 0, 300);
gradient.addColorStop(0, 'rgba(255, 234, 0, 0.6)');
gradient.addColorStop(1, 'rgba(255, 234, 0, 0.05)');

// Configurar datos
const chartData = {
  labels: xLabels,
  datasets: [{
    label: chart,
    data: data.y,
    borderColor: '#FFD700', // Dorado brillante
    backgroundColor: gradient,
    borderWidth: 3,
    pointRadius: 0,
    pointHoverRadius: 6,
    pointHoverBackgroundColor: '#FFD700',
    pointHoverBorderColor: '#fff',
    pointHoverBorderWidth: 2,
    fill: true,
    tension: 0.4, // Curva suave
    cubicInterpolationMode: 'monotone'
  }]
};

// Opciones avanzadas
const chartOptions = {
  responsive: true,
  maintainAspectRatio: false,
  animation: {
    duration: 1000,
    easing: 'easeOutQuart'
  },
  plugins: {
    legend: {
      display: false
    },
    tooltip: {
      enabled: true,
      backgroundColor: 'rgba(25, 25, 35, 0.9)',
      titleFont: {
        family: "'Inter', sans-serif",
        size: 14,
        weight: '600'
      },
      bodyFont: {
        family: "'Inter', sans-serif",
        size: 13
      },
      padding: 12,
      cornerRadius: 12,
      displayColors: false,
      callbacks: {
        title: () => `Hora ${xLabels[tooltipItem.dataIndex]}`,
        label: (tooltipItem) => `${chart}: ${tooltipItem.raw.toFixed(2)}`
      }
    }
  },
  scales: {
    x: {
      display: false,
      grid: {
        display: false
      }
    },
    y: {
      beginAtZero: false,
      grid: {
        color: 'rgba(0, 0, 0, 0.05)',
        drawBorder: false
      },
      ticks: {
        font: {
          family: "'Inter', sans-serif",
          size: 12
        },
        callback: function(value) {
          return value.toLocaleString();
        }
      },
      title: {
        display: true,
        text: chart,
        font: {
          family: "'Inter', sans-serif",
          size: 13,
          weight: '600'
        },
        color: '#4B5563'
      }
    }
  },
  interaction: {
    intersect: false,
    mode: 'index'
  }
};

// Crear la gr√°fica
chartInstance = new Chart(ctx, {
  type: 'line',
  data: chartData,
  options: chartOptions
});

        } catch (error) {
          console.error("Error al cargar la gr√°fica:", error);
          alert("Error al cargar la gr√°fica. Por favor, int√©ntalo de nuevo.");
        }
      });
    }

    if (window.L) {
      loadLeaflet();
    } else {
      const script = document.createElement("script");
      script.src = "https://unpkg.com/leaflet@1.9.4/dist/leaflet.js";
      script.onload = loadLeaflet;
      document.head.appendChild(script);
    }
  }
</script>