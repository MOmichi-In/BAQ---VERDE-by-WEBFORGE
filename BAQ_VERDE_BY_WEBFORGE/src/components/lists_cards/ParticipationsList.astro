---
import ParticipationCard from "../common/ParticipationCard.astro";
import { ParticipationsData } from "../../lib/participation_data.js";
import "../../styles/common/carousel.css";
---

<div class="participation-carousel carousel">
  <div class="cards-wrapper">
    {ParticipationsData.map((item) => (
      <div class="card-container">
        <ParticipationCard {...item} />
      </div>
    ))}
  </div>

  <div class="carousel-controls">
    <button class="prevBtn" aria-label="Previous">Anterior</button>
    <button class="nextBtn" aria-label="Next">Siguiente</button>
  </div>
</div>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const carousels = document.querySelectorAll(".participation-carousel");

    carousels.forEach((carousel) => {
      const wrapper = carousel.querySelector(".cards-wrapper");
      const prevBtn = carousel.querySelector(".prevBtn");
      const nextBtn = carousel.querySelector(".nextBtn");
      const controls = carousel.querySelector(".carousel-controls");

      let currentIndex = 0;

      function getCardWidth() {
        const firstCard = wrapper.querySelector(".card-container");
        return firstCard ? firstCard.offsetWidth : 0;
      }

      function visibleCount() {
        const cw = getCardWidth();
        if (!cw) return 1;
        return Math.max(1, Math.floor(wrapper.clientWidth / cw));
      }

      function updateCarousel() {
        const cardWidth = getCardWidth();
        const offset = -(currentIndex * cardWidth);
        wrapper.style.transform = `translateX(${offset}px)`;
      }

      function checkMode() {
        if (window.innerWidth > 900) {
          controls.style.display = "flex";
          wrapper.style.transition = "transform 0.4s ease-in-out";

          const maxIndex = wrapper.children.length - visibleCount();
          currentIndex = Math.max(0, Math.min(currentIndex, maxIndex));
          updateCarousel();
        } else {
          controls.style.display = "none";
          wrapper.style.transition = "none";
          wrapper.style.transform = "none";
        }
      }

      nextBtn?.addEventListener("click", () => {
        const maxIndex = wrapper.children.length - visibleCount();
        if (currentIndex < maxIndex) {
          currentIndex++;
          updateCarousel();
        }
      });

      prevBtn?.addEventListener("click", () => {
        if (currentIndex > 0) {
          currentIndex--;
          updateCarousel();
        }
      });

      let resizeTimeout;
      window.addEventListener("resize", () => {
        clearTimeout(resizeTimeout);
        resizeTimeout = setTimeout(checkMode, 120);
      });

      checkMode();
    });
  });
</script>
