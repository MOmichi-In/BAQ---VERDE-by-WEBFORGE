---
import Layout from '../../../layouts/DashboardLayout.astro';
import { api } from '../../../lib/api';

export const prerender = false;

const cookieStore = Astro.cookies;
const sessionToken = cookieStore.get('token')?.value;

if (!sessionToken) {
  return Astro.redirect('/login');
}

if (Astro.url.searchParams.get('logout') === 'true') {
  Astro.cookies.delete('token', { path: '/' });
  return Astro.redirect('/login');
}

// Obtener estaciones desde la API
const data = await api("/stations", sessionToken);
const stations = data || [];
---

<Layout title="Gesti√≥n de Estaciones">
  <div class="dashboard-container">
    <!-- Header Section -->
    <div class="dashboard-header">
      <div class="header-content">
        <div class="title-section">
          <h1 class="dashboard-title">üì° Gesti√≥n de Estaciones</h1>
          <p class="dashboard-subtitle">Administra las estaciones de monitoreo ambiental</p>
        </div>
        <div class="header-actions">
          <a href="/dashboard/stations/create" class="btn-primary">
            <span class="btn-icon">‚ûï</span>
            Crear Estaci√≥n
          </a>
        </div>
      </div>
    </div>

    <!-- Empty State -->
    {stations.length === 0 ? (
      <div class="empty-state">
        <div class="empty-icon">üì≠</div>
        <h3 class="empty-title">No hay estaciones registradas</h3>
        <p class="empty-text">Crea tu primera estaci√≥n de monitoreo ambiental para comenzar a recopilar datos.</p>
        <a href="/dashboard/stations/create" class="btn-primary empty-btn">
          <span class="btn-icon">‚ûï</span>
          Crear Primera Estaci√≥n
        </a>
      </div>
    ) : (
      <!-- Stations Grid -->
      <div class="stations-grid">
        {stations.map((station) => (
          <div class="station-card">
            <div class="station-header">
              <h3 class="station-title">üìç {station.name}</h3>
            </div>
            <div class="station-body">
              <div class="station-coordinates">
                <p><strong>Latitud:</strong> <span class="coord-value">{station.lat}¬∞</span></p>
                <p><strong>Longitud:</strong> <span class="coord-value">{station.lon}¬∞</span></p>
              </div>
              <div class="station-charts">
                <h4 class="charts-title">üìä Gr√°ficos permitidos:</h4>
                <ul class="charts-list">
                  {station.charts_permited.map((chart) => (
                    <li class="chart-item">{chart}</li>
                  ))}
                </ul>
              </div>
            </div>
            <div class="station-actions">
              <a href={`/dashboard/stations/edit/${station._id}`} class="btn-edit">
                <span class="btn-icon">‚úèÔ∏è</span>
                Editar
              </a>
              {/* ===== BOT√ìN A√ëADIDO PARA ABRIR EL MODAL ===== */}
              <button class="btn-upload" data-id={station._id} data-name={station.name}>
                <span class="btn-icon">üìÑ</span>
                Cargar
              </button>
              <button class="btn-delete" data-id={station._id}>
                <span class="btn-icon">üóëÔ∏è</span>
                Eliminar
              </button>
            </div>
          </div>
        ))}
      </div>
    )}
  </div>

  {/* ===== MODAL A√ëADIDO PARA LA CARGA DE EXCEL ===== */}
  <div id="excelModal" class="modal-overlay" style="display: none;">
    <div class="modal-content">
      <div class="modal-header">
        <h3 class="modal-title">Cargar Datos para <span id="modalStationName" class="station-name-highlight"></span></h3>
        <button id="closeModalBtn" class="modal-close-btn">&times;</button>
      </div>
      <div class="modal-body">
        <p>
          Selecciona un archivo Excel (.xlsx, .xls) para cargar los datos de
          mediciones de esta estaci√≥n.
        </p>
        <form id="excelUploadForm">
          <input type="hidden" id="modalStationId" name="stationId" />
          <div class="form-group">
            <label for="excelFile" class="form-label">
              <span class="label-icon">üìÅ</span>
              Archivo Excel
            </label>
            <input
              type="file"
              id="excelFile"
              name="excelFile"
              class="form-input-file"
              accept=".xlsx, .xls"
              required
            />
          </div>
          <div class="modal-actions">
            <button type="submit" class="btn-submit">
              <span class="btn-icon">üöÄ</span>
              Subir Archivo
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>


  <style>
    .dashboard-container {
      padding: var(--spacing-xl);
      max-width: 1200px;
      margin: 0 auto;
      min-height: 100vh;
      max-width: 95vw;
      background: var(--color-gris-claro);
    }

    .dashboard-header {
      background: var(--color-verde);
      border-radius: var(--border-radius-lg);
      padding: var(--spacing-xl);
      margin-bottom: var(--spacing-xl);
      color: var(--color-blanco);
      box-shadow: var(--shadow-lg);
    }

    .header-content {
      display: flex;
      justify-content: space-between;
      align-items: center;
      flex-wrap: wrap;
      gap: var(--spacing-md);
    }

    .title-section { flex: 1; }

    .dashboard-title {
      font-size: 2.5rem;
      font-weight: 700;
      margin: 0 0 var(--spacing-sm) 0;
      color: var(--color-blanco);
    }

    .dashboard-subtitle {
      font-size: 1.1rem;
      opacity: 0.9;
      margin: 0;
    }

    .btn-primary {
      background: var(--color-amarillo);
      color: var(--color-azul-oscuro);
      padding: var(--spacing-md) var(--spacing-lg);
      border-radius: var(--border-radius-lg);
      font-weight: 600;
      display: flex;
      align-items: center;
      gap: var(--spacing-sm);
      transition: all 0.3s ease;
      border: none;
      text-decoration: none;
      box-shadow: var(--shadow-md);
    }

    .btn-primary:hover {
      transform: translateY(-2px);
      background: var(--color-verde-secundario);
      color: var(--color-blanco);
      box-shadow: var(--shadow-lg);
    }

    .btn-icon { font-size: 1.1rem; }

    /* Stations Grid */
    .stations-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
      gap: var(--spacing-lg);
    }

    .station-card {
      background: var(--color-blanco);
      border-radius: var(--border-radius-lg);
      padding: var(--spacing-md);
      border: 1px solid var(--color-gris-claro);
      box-shadow: var(--shadow-md);
      transition: all 0.3s ease;
      display: flex;
      flex-direction: column;
    }

    .station-card:hover {
      transform: translateY(-4px);
      box-shadow: var(--shadow-lg);
    }

    .station-header { margin-bottom: var(--spacing-md); }

    .station-title {
      font-size: 1.35rem;
      font-weight: 600;
      color: var(--color-amarillo);
      margin: 0;
      word-break: break-word;
    }

    .station-body {
      margin-bottom: var(--spacing-lg);
      flex-grow: 1;
    }

    .station-coordinates {
      background: rgba(var(--color-verde-rgb), 0.05);
      padding: var(--spacing-md);
      border-radius: var(--border-radius-md);
      margin-bottom: var(--spacing-lg);
    }

    .coord-value {
      color: var(--color-azul-oscuro);
      font-weight: 600;
    }

    .station-charts {
      background: rgba(var(--color-amarillo-rgb), 0.05);
      padding: var(--spacing-md);
      border-radius: var(--border-radius-md);
    }

    .charts-title {
      font-size: 1rem;
      font-weight: 600;
      color: var(--color-azul-oscuro);
      margin: 0 0 var(--spacing-sm) 0;
    }

    .charts-list {
      margin: 0;
      padding-left: 1.25rem;
    }

    .chart-item {
      font-size: 0.9rem;
      color: var(--color-gris-oscuro);
      margin-bottom: 0.25rem;
    }

    .station-actions {
      /* ===== ESTILO MODIFICADO PARA ACOMODAR 3 BOTONES ===== */
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
      gap: var(--spacing-sm);
      margin-top: auto;
    }

    .btn-edit,
    .btn-delete,
    .btn-upload { /* ===== SELECTOR .btn-upload A√ëADIDO ===== */
      padding: 0.75rem 1rem;
      border-radius: var(--border-radius-md);
      font-weight: 600;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: var(--spacing-xs);
      transition: all 0.3s ease;
      cursor: pointer;
      text-decoration: none;
      font-size: 0.9rem;
      border: none;
      width: 100%;
    }

    .btn-edit {
      background: var(--color-azul-oscuro);
      color: var(--color-blanco);
      box-shadow: var(--shadow-sm);
    }

    .btn-edit:hover {
      transform: translateY(-2px);
      background: var(--color-verde);
      box-shadow: var(--shadow-md);
    }

    /* ===== ESTILOS A√ëADIDOS PARA EL BOT√ìN DE CARGA ===== */
    .btn-upload {
      background: #3a4b6d;
      color: var(--color-blanco);
      box-shadow: var(--shadow-sm);
    }
    .btn-upload:hover {
       transform: translateY(-2px);
       background: #4f6a9c;
       box-shadow: var(--shadow-md);
    }

    .btn-delete {
      background: var(--color-amarillo);
      color: var(--color-azul-oscuro);
      box-shadow: var(--shadow-sm);
    }

    .btn-delete:hover {
      transform: translateY(-2px);
      background: var(--color-verde-secundario);
      color: var(--color-blanco);
      box-shadow: var(--shadow-md);
    }

    /* Empty State */
    .empty-state {
      text-align: center;
      padding: 4rem 2rem;
      background: rgba(255, 255, 255, 0.6);
      border-radius: var(--border-radius-lg);
      backdrop-filter: blur(5px);
      border: 2px dashed var(--color-gris);
      margin: 2rem 0;
    }

    .empty-icon { font-size: 4rem; color: var(--color-gris-medio); margin-bottom: var(--spacing-sm); }
    .empty-title { font-size: 1.8rem; font-weight: 600; color: var(--color-gris-oscuro); margin: 0 0 var(--spacing-sm) 0; }
    .empty-text { font-size: 1.1rem; color: var(--color-gris); max-width: 600px; margin: 0 auto var(--spacing-md); }
    .empty-btn { margin-top: var(--spacing-sm); }

    /* ===== ESTILOS A√ëADIDOS PARA EL MODAL ===== */
    .modal-overlay {
      position: fixed; top: 0; left: 0;
      width: 100%; height: 100%;
      background-color: rgba(0, 0, 0, 0.6);
      display: flex; justify-content: center; align-items: center;
      z-index: 1000;
      backdrop-filter: blur(5px);
    }
    .modal-content {
      background: white; padding: var(--spacing-xl);
      border-radius: var(--border-radius-lg); box-shadow: var(--shadow-xl);
      width: 90%; max-width: 500px; animation: fadeIn 0.3s ease-out;
    }
    @keyframes fadeIn { from { opacity: 0; transform: scale(0.95); } to { opacity: 1; transform: scale(1); } }
    .modal-header {
      display: flex; justify-content: space-between; align-items: center;
      border-bottom: 1px solid var(--color-gris-claro);
      padding-bottom: var(--spacing-md); margin-bottom: var(--spacing-lg);
    }
    .modal-title { font-size: 1.5rem; color: var(--color-azul-oscuro); margin: 0; }
    .station-name-highlight { color: var(--color-verde); font-weight: bold; }
    .modal-close-btn { background: transparent; border: none; font-size: 2rem; cursor: pointer; color: var(--color-gris-oscuro); }
    .modal-body .form-group { display: flex; flex-direction: column; gap: var(--spacing-xs); }
    .modal-body .form-label { font-weight: 600; color: var(--color-azul-oscuro); display: flex; align-items: center; gap: var(--spacing-xs); font-size: 0.95rem; }
    .modal-body p { margin-bottom: var(--spacing-lg); color: var(--color-gris); }
    .form-input-file { padding: var(--spacing-sm); border: 2px dashed var(--color-gris-claro); border-radius: var(--border-radius-md); width: 100%; cursor: pointer; }
    .form-input-file:hover { border-color: var(--color-verde); }
    .modal-actions { display: flex; justify-content: flex-end; margin-top: var(--spacing-lg); }
    .btn-submit {
      padding: var(--spacing-md) var(--spacing-xl); border-radius: var(--border-radius-md);
      font-weight: 600; display: flex; align-items: center; gap: var(--spacing-xs);
      transition: all 0.3s ease; cursor: pointer; text-decoration: none; font-size: 1rem;
      background: var(--color-verde); color: var(--color-blanco); border: none; box-shadow: var(--shadow-sm);
    }
    .btn-submit:hover { transform: translateY(-2px); box-shadow: var(--shadow-md); }

    @media (max-width: 768px) {
      .dashboard-container { padding: var(--spacing-lg); }
      .dashboard-title { font-size: 2rem; }
      .header-content { flex-direction: column; text-align: center; }
      .stations-grid { grid-template-columns: 1fr; }
      .station-actions { grid-template-columns: 1fr; }
      .btn-primary { width: 100%; }
    }
  </style>

  <script>
    document.addEventListener('DOMContentLoaded', () => {

      // --- L√≥gica para el Modal de Carga de Excel ---
      const modal = document.getElementById('excelModal');
      const closeModalBtn = document.getElementById('closeModalBtn');
      const uploadForm = document.getElementById('excelUploadForm');
      const modalStationIdInput = document.getElementById('modalStationId');
      const modalStationNameSpan = document.getElementById('modalStationName');
      
      const openModal = (id, name) => {
        if (!modal) return;
        modalStationIdInput.value = id;
        modalStationNameSpan.textContent = name;
        modal.style.display = 'flex';
      };

      const closeModal = () => {
        if (!modal) return;
        modal.style.display = 'none';
        uploadForm.reset();
      };

      document.querySelectorAll('.btn-upload').forEach(btn => {
        btn.addEventListener('click', (e) => {
          const id = e.currentTarget.dataset.id;
          const name = e.currentTarget.dataset.name;
          openModal(id, name);
        });
      });

      if (closeModalBtn) closeModalBtn.addEventListener('click', closeModal);
      window.addEventListener('click', (event) => {
        if (event.target === modal) closeModal();
      });

      if(uploadForm) {
        uploadForm.addEventListener('submit', async (e) => {
          e.preventDefault();
          const stationId = modalStationIdInput.value;
          const formData = new FormData(uploadForm);
          const token = document.cookie.split('; ').find(row => row.startsWith('token='))?.split('=')[1];

          if (!token) {
            alert('Sesi√≥n expirada. Por favor, inicia sesi√≥n de nuevo.');
            return;
          }

          try {
            const res = await fetch(`${import.meta.env.PUBLIC_URL_SERVER}/stations/upload/${stationId}`, {
                method: 'POST',
                headers: { 'Authorization': `Bearer ${token}` },
                body: formData
            });

            if (res.ok) {
                alert('Archivo subido con √©xito.');
                closeModal();
            } else {
                const errorData = await res.json().catch(() => ({}));
                alert(`Error al subir el archivo: ${errorData.detail || 'Error desconocido'}`);
            }
          } catch(err) {
            alert('Error de conexi√≥n al subir el archivo.');
            console.error(err);
          }
        });
      }

      // --- L√≥gica existente para el bot√≥n de Eliminar ---
      document.querySelectorAll('.btn-delete').forEach(btn => {
        btn.addEventListener('click', async (e) => {
          const id = e.currentTarget.dataset.id;
          if (!confirm('¬øEliminar esta estaci√≥n? Esta acci√≥n no se puede deshacer.')) return;

          const token = document.cookie.split('; ').find(row => row.startsWith('token='))?.split('=')[1];

          if (!token) {
            alert('Sesi√≥n expirada. Por favor, inicia sesi√≥n de nuevo.');
            window.location.href = '/login';
            return;
          }

          try {
            const res = await fetch(`${import.meta.env.PUBLIC_URL_SERVER}/stations/${id}`, {
              method: 'DELETE',
              headers: { 'Authorization': `Bearer ${token}` }
            });

            if (res.ok) {
              alert('Estaci√≥n eliminada con √©xito');
              location.reload();
            } else {
              const errorData = await res.json().catch(() => ({}));
              alert(`Error al eliminar: ${errorData.detail || 'Error desconocido'}`);
            }
          } catch (err) {
            alert('Error de conexi√≥n.');
            console.error(err);
          }
        });
      });
    });
  </script>
</Layout>