---
import { getStations } from "../../lib/stationsService";

const cookieStore = Astro.cookies;
const sessionToken = cookieStore.get("token")?.value || null;

console.log("üëâ Token de sesi√≥n le√≠do en .astro:", sessionToken);

let stations = [];
try {
  const data = await getStations(sessionToken);

  console.log("üëâ Respuesta cruda de la API en .astro:", data);

  if (Array.isArray(data)) {
    // Caso 1: la API devuelve directamente un array
    stations = data;
  } else if (data && Array.isArray(data.stations)) {
    // Caso 2: la API devuelve un objeto con clave stations
    stations = data.stations;
  } else {
    console.warn("‚ö†Ô∏è La API no devolvi√≥ un array ni un objeto con stations");
  }
} catch (error) {
  console.error("‚ùå Error al obtener las estaciones:", error);
}

console.log("‚úÖ Estaciones obtenidas en el servidor:", stations);
---


<!-- Estilos de Leaflet -->
<link 
  rel="stylesheet" 
  href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" 
/>
<!-- Font Awesome -->
<link 
  rel="stylesheet" 
  href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" 
/>
<!-- Google Fonts -->
<link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">

<style is:global>
  /* Contenedor principal */
  .map-app-container {
    display: flex;
    height: calc(100vh - 4rem);
    width: 100%;
    overflow: hidden;
    box-shadow: var(--shadow-lg);
    font-family: var(--font-family-base);
    background-color: var(--bv-blanco);
    border: 1px solid var(--bv-gris-claro);
    border-radius: var(--border-radius-md);
  }

  /* Sidebar izquierdo */
  .sidebar {
    display: flex;
    width: 320px;
    display: flex;
    flex-direction: column;
    border-right: 1px solid var(--bv-gris-claro);
    background: var(--bv-blanco);
    z-index: 2;
    overflow: auto;
  }

  /* Header del sidebar */
  .sidebar-header {
    padding: var(--spacing-lg) var(--spacing-md);
    background: linear-gradient(135deg, var(--bv-verde-primario) 0%, var(--bv-verde-primario-dark) 100%);
    color: var(--bv-blanco);
    position: relative;
    flex-shrink: 0;
  }

  .sidebar-header h3 {
    color: var(--bv-blanco);
    margin: 0;
    font-size: 1.125rem;
    font-weight: 700;
    line-height: 1.3;
    font-family: var(--font-family-heading);
  }

  .sidebar-subtitle {
    font-size: 0.8125rem;
    opacity: 0.95;
    margin-top: var(--spacing-xs);
  }

  /* Contenido del sidebar */
  .sidebar-content {
    flex: 1;
    padding: var(--spacing-md);
    overflow-y: auto;
    background: var(--bv-gris-claro);
  }

  /* Grupo de filtros */
  .filter-group {
    margin-bottom: var(--spacing-md);
  }

  /* Items de filtro */
  .filter-item {
    display: flex;
    align-items: center;
    padding: var(--spacing-md);
    background: var(--bv-blanco);
    border: 1px solid var(--bv-gris-claro);
    border-radius: var(--border-radius-lg);
    margin-bottom: var(--spacing-md);
    cursor: pointer;
    transition: transform 0.18s ease, box-shadow 0.18s ease, border-color 0.18s ease;
    position: relative;
  }

  .filter-item:hover {
    transform: translateY(-2px);
    box-shadow: var(--shadow-md);
    border-color: var(--bv-verde-primario);
  }

  .filter-item.active {
    border-color: var(--bv-verde-primario);
    box-shadow: 0 0 0 6px rgba(55,180,72,0.06);
  }

  .filter-item-icon {
    width: 44px;
    height: 44px;
    border-radius: var(--border-radius-md);
    display: flex;
    justify-content: center;
    align-items: center;
    margin-right: var(--spacing-md);
    font-size: 18px;
    flex-shrink: 0;
  }

  .filter-item-content {
    flex-grow: 1;
    min-width: 0;
  }

  .filter-item-title {
    font-size: 0.9375rem;
    font-weight: 600;
    color: var(--bv-azul-oscuro);
    margin-bottom: 2px;
    display: flex;
    align-items: center;
    gap: var(--spacing-sm);
    font-family: var(--font-family-heading);
  }

  .category-count {
    font-size: 0.75rem;
    font-weight: 500;
    color: var(--bv-gris);
    background-color: var(--bv-gris-claro);
    padding: 2px var(--spacing-sm);
    border-radius: var(--border-radius-lg);
    min-width: 24px;
    text-align: center;
  }

  .filter-item-description {
    font-size: 0.8125rem;
    color: var(--bv-gris);
    line-height: 1.4;
  }

  /* Switch moderno */
  .switch {
    position: relative;
    display: inline-block;
    width: 48px;
    height: 28px;
    flex-shrink: 0;
  }
  .switch input { opacity: 0; width: 0; height: 0; }
  .slider {
    position: absolute;
    cursor: pointer;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: var(--bv-gris-claro);
    transition: background-color 0.3s cubic-bezier(0.4,0,0.2,1), box-shadow 0.2s ease;
    border-radius: 34px;
  }
  .slider:before {
    position: absolute;
    content: "";
    height: 20px;
    width: 20px;
    left: 4px;
    bottom: 4px;
    background-color: var(--bv-blanco);
    transition: transform 0.3s cubic-bezier(0.4,0,0.2,1);
    border-radius: 50%;
    box-shadow: var(--shadow-sm);
  }
  .switch input:checked + .slider { background-color: var(--bv-amarillo); }
  .switch input:checked + .slider.biodiversity-slider { background-color: var(--bv-verde-primario-dark); }
  .switch input:checked + .slider.soil-slider { background-color: rgba(137, 81, 41, 1); }
  .switch input:focus + .slider { box-shadow: 0 0 0 4px rgba(55,180,72,0.12); }
  .switch input:checked + .slider:before { transform: translateX(20px); }

  /* Mapa */
  #map {
    flex: 1;
    height: 100%;
    position: relative;
    background-color: var(--bv-gris-claro);
  }

  /* Popups y marcadores */
  .leaflet-popup-content-wrapper {
    border-radius: var(--border-radius-lg);
    box-shadow: var(--shadow-lg);
    border: none;
    padding: 0;
    overflow: hidden;
  }
  .leaflet-popup-content {
    font-family: var(--font-family-base);
    color: var(--bv-azul-oscuro);
    font-size: 14px;
    margin: 0;
    padding: var(--spacing-md);
    background: var(--bv-blanco);
  }
  .leaflet-popup-content h4 {
    color: var(--bv-verde-primario);
    margin: 0 0 var(--spacing-sm) 0;
    font-size: 1rem;
    font-weight: 600;
    font-family: var(--font-family-heading);
  }
  .leaflet-popup-content p {
    margin: var(--spacing-xs) 0 0 0;
    color: var(--bv-gris);
    font-size: 0.8125rem;
    line-height: 1.4;
  }
  .custom-marker-icon {
    background: transparent !important;
    border: none !important;
  }
  .marker-bubble {
    width: 36px;
    height: 36px;
    border-radius: 50%;
    display: flex;
    justify-content: center;
    align-items: center;
    color: var(--bv-blanco);
    font-weight: 700;
    font-size: 14px;
    box-shadow: var(--shadow-md);
    border: 3px solid var(--bv-blanco);
    position: relative;
    transform: translateY(-50%);
  }
  .marker-bubble::after {
    content: '';
    position: absolute;
    bottom: -6px;
    left: 50%;
    transform: translateX(-50%);
    border-left: 6px solid transparent;
    border-right: 6px solid transparent;
    border-top: 6px solid var(--bv-blanco);
  }

  /* Responsive */
  @media (max-width: 1024px) {
    .map-app-container { flex-direction: column; }
    .sidebar { width: 100%; max-height: 40%; }
    #map { height: 60%; }
  }
</style>

<!-- Contenido principal -->
<div class="map-app-container">
  <div class="sidebar" role="region" aria-label="Filtros de mapas">
    <div class="sidebar-header">
      <h3>Datos Ambientales</h3>
      <div class="sidebar-subtitle">Barranquilla, Colombia</div>
    </div>
    <div class="sidebar-content">

      <!-- Grupo 1: Calidad del Aire (Conectado a la API) -->
      <div class="filter-group">
        <div class="filter-item" data-category="airQuality">
          <div class="filter-item-icon" style="background-color: rgba(255, 234, 0, 0.1); color: #FFEA00;"><i class="fas fa-wind"></i></div>
          <div class="filter-item-content">
            <!-- PASO 2: CONTADOR DIN√ÅMICO -->
            <div class="filter-item-title">Calidad del aire <span class="category-count">({stations.length})</span></div>
            <div class="filter-item-description">Estaciones de monitoreo</div>
          </div>
          <label class="switch">
            <input type="checkbox" checked data-category="airQuality">
            <span class="slider airQuality-slider"></span>
          </label>
        </div>
      </div>

      <!-- Grupo 2: Biodiversidad (Vac√≠o) -->
      <div class="filter-group">
        <div class="filter-item" data-category="biodiversity">
          <div class="filter-item-icon" style="background-color: rgba(39, 155, 72, 0.1); color: #279B48;"><i class="fas fa-leaf"></i></div>
          <div class="filter-item-content">
            <div class="filter-item-title">Biodiversidad <span class="category-count">(0)</span></div>
            <div class="filter-item-description">Reservas naturales, corredores</div>
          </div>
          <label class="switch">
            <input type="checkbox" data-category="biodiversity">
            <span class="slider biodiversity-slider"></span>
          </label>
        </div>
      </div>

      <!-- Grupo 3: Suelo (Vac√≠o) -->
      <div class="filter-group">
        <div class="filter-item" data-category="soil">
          <div class="filter-item-icon" style="background-color: rgba(57, 169, 52, 0.1); color: #39A934;"><i class="fas fa-mountain"></i></div>
          <div class="filter-item-content">
            <div class="filter-item-title">Suelo <span class="category-count">(0)</span></div>
            <div class="filter-item-description">Calidad, erosi√≥n, uso de tierra</div>
          </div>
          <label class="switch">
            <input type="checkbox" data-category="soil">
            <span class="slider soil-slider"></span>
          </label>
        </div>
      </div>

    </div>
  </div>
  <div id="map" role="application" aria-label="Mapa Interactivo"></div>
</div>

<!-- PASO 3: PASAR DATOS DEL SERVIDOR AL SCRIPT -->
<script define:vars={{ stationsFromServer: stations }}>
  // Solo se ejecuta en el navegador
  if (typeof window !== "undefined") {
    
    const categoriesConfig = {
      airQuality: { color: '#FFEA00' },
      biodiversity: { color: 'var(--bv-verde-primario-dark)' },
      soil: { color: 'rgba(137, 81, 41, 1)' }
    };

    // --- Normalizamos estaciones para que siempre tengan "lng" ---
    const normalizedStations = stationsFromServer.map(station => ({
      ...station,
      lng: station.lon, // ‚úÖ convertimos aqu√≠ de una vez
    }));

    // 1. Convertimos las estaciones normalizadas al formato del mapa
    const airQualityMarkers = normalizedStations.map(station => ({
      id: station._id,
      lat: station.lat,
      lng: station.lng, // ya viene convertido
      category: 'airQuality',
      popupContent: `<h4>${station.name}</h4>
                     <p><b>Gr√°ficos:</b> ${station.charts_permited.join(', ')}</p>`
    }));

    // 2. Unificamos todas las categor√≠as
    const allMarkersData = [
      ...airQualityMarkers,
      // En el futuro puedes meter aqu√≠ biodiversity o soil
    ];

    let map;
    let currentMarkers = {};

    // Funci√≥n para crear iconos personalizados
    function createCustomMarkerIcon(color, number) {
      let actualColor = color;
      if (color.startsWith('var(')) {
        const rootStyles = getComputedStyle(document.documentElement);
        const colorName = color.replace('var(', '').replace(')', '');
        actualColor = rootStyles.getPropertyValue(colorName).trim();
      }
      return L.divIcon({
        className: 'custom-marker-icon',
        html: `<div style="background-color: ${actualColor};" class="marker-bubble">${number}</div>`,
        iconSize: [36, 48],
        iconAnchor: [18, 42],
        popupAnchor: [0, -42]
      });
    }

    // Renderizado din√°mico de marcadores
    function renderMarkers() {
      // Limpiar markers actuales
      for (const category in currentMarkers) {
        currentMarkers[category].forEach(marker => map.removeLayer(marker));
      }
      currentMarkers = {};

      // Categor√≠as activas desde los checkboxes
      const activeCategories = Array.from(document.querySelectorAll('.sidebar input[type="checkbox"]:checked'))
        .map(input => input.dataset.category);

      document.querySelectorAll('.filter-item').forEach(item => {
        item.classList.toggle('active', activeCategories.includes(item.dataset.category));
      });

      // Renderizar por categor√≠a
      activeCategories.forEach(activeCat => {
        currentMarkers[activeCat] = [];
        const markersForCategory = allMarkersData.filter(data => data.category === activeCat);

        markersForCategory.forEach((markerData, index) => {
          const color = categoriesConfig[activeCat].color;
          const markerIcon = createCustomMarkerIcon(color, index + 1);
          const marker = L.marker([markerData.lat, markerData.lng], { icon: markerIcon })
            .addTo(map)
            .bindPopup(markerData.popupContent);
          currentMarkers[activeCat].push(marker);
        });
      });
    }

    // Inicializaci√≥n del mapa
    const loadLeaflet = () => {
      map = L.map("map", { center: [10.9877, -74.8055], zoom: 13, zoomControl: false });
      L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
        attribution: "&copy; OpenStreetMap contributors",
        maxZoom: 19
      }).addTo(map);

      renderMarkers();

      document.querySelectorAll('.sidebar input[type="checkbox"]').forEach(checkbox => {
        checkbox.addEventListener('change', renderMarkers);
      });
    };

    // Cargar Leaflet solo si no est√° cargado
    if (window.L) {
      loadLeaflet();
    } else {
      const script = document.createElement("script");
      script.src = "https://unpkg.com/leaflet@1.9.4/dist/leaflet.js";
      script.onload = loadLeaflet;
      document.head.appendChild(script);
    }
  }

  // Script de auto-scroll
  document.addEventListener("DOMContentLoaded", () => {
    const mapaSection = document.querySelector(".map-app-container");
    if (!mapaSection) return;
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          window.scrollTo({ top: mapaSection.offsetTop - 64, behavior: "smooth" });
          observer.unobserve(mapaSection);
        }
      });
    }, { threshold: 0.5 });
    observer.observe(mapaSection);
  });
</script>
